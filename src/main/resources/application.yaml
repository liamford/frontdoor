spring:
  kafka:
    bootstrap-servers: localhost:9092
    listener:
      ack-mode: manual
    properties:
      schema.registry.url: http://localhost:8081
      auto.register.schemas: true
    consumer:
      client-id: frontdoor
      group-id: frontdoor
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
        auto.offset.reset: earliest
        enable.auto.commit: false
        isolation.level: read_committed
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        max.poll.records: 500
        max.poll.interval.ms: 300000
      security:
        protocol: PLAINTEXT
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        acks: all
        retries: 10
        batch-size: 16384
        linger-ms: 1
        buffer-memory: 33554432
        auto.create.topics.enable: true
        auto.register.schemas: true
      security:
        protocol: PLAINTEXT
    security:
      protocol: PLAINTEXT
  application:
    name: frontdoor
  temporal:
    namespace: default
    connection:
      target: 127.0.0.1:7233
    workers:
      - name: normal-payment-worker
        task-queue: payment_normal_subscription
      - name: high-payment-worker
        task-queue: payment_high_subscription
    workersAutoDiscovery:
      packages:
        - com.payments.frontdoor.workflows
        - com.payments.frontdoor.activities
  profiles:
    active: local
  devtools:
    restart:
      enabled: false
      exclude: com.payments.frontdoor.avro.*
      additional-exclude: com/payments/frontdoor/avro/PaymentRecord.class
server:
  port: 8080
  error:
    include-stacktrace: on_param
  servlet:
    context-path: /api/payments/v1
payments:
  kafka:
    topics:
      managed: payments.managed.v1
      authorized: payments.authorized.v1
      executed: payments.executed.v1
      cleared: payments.cleared.v1
      notified: payments.notified.v1
      reconciled: payments.reconciled.v1
      posted: payments.posted.v1
      refund: payments.refund.v1
      reported: payments.reported.v1
      archived: payments.archived.v1
  api:
    urls:
      authorize: http://localhost:3001/api/authorize
      order: http://localhost:3001/api/payment-orders/process
management:
  endpoints:
    web:
      exposure:
        include: prometheus,workerinfo

