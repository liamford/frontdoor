plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.hidetake.swagger.generator' version '2.19.2'
	id 'idea'
	id 'io.gatling.gradle' version '3.13.1.2'
	id 'jacoco'
}

group = 'com.payments'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.18.2'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.temporal:temporal-spring-boot-starter-alpha:1.23.2'
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.52'  // or Swagger Codegen V3
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
	testImplementation 'io.gatling.highcharts:gatling-charts-highcharts:3.13.1'
	testImplementation 'io.gatling:gatling-test-framework:3.13.1'
}

swaggerSources {
	payment {
		inputFile = file('src/main/resources/api/submit-payment.yaml')
		code {
			language = 'spring'
			outputDir = file('build/swagger')
			components = ['models']
			configFile = file('src/main/resources/api/config.json')
		}
	}
}


jacocoTestReport {
	reports {
		xml.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

tasks.named("check") {
	it.dependsOn(tasks.named("jacocoTestReport"))
}


idea {
	module {
		inheritOutputDirs = false
		outputDir = swaggerSources.payment.code.outputDir
	}
}



compileJava.dependsOn swaggerSources.payment.code
sourceSets.main.java.srcDir "${swaggerSources.payment.code.outputDir}/src/main/java"

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('jar') {
	enabled = false
}

configurations.configureEach {
	resolutionStrategy.eachDependency { details ->
		if (details.requested.group == 'org.apache.tomcat.embed' && details.requested.name == 'tomcat-embed-core') {
			details.useVersion("10.1.34")
			details.because("CVE-2024-50379")
		}

		if (details.requested.group == 'ch.qos.logback') {
			details.useVersion '1.5.15'
			details.because("CVE-2024-12798")
		}
	}
}