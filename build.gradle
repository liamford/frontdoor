plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.hidetake.swagger.generator' version '2.19.2'
	id 'idea'
	id 'io.gatling.gradle' version '3.13.1.2'
	id 'jacoco'
	id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
    id 'com.avast.gradle.docker-compose' version '0.17.12'
}

group = 'com.payments'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

avro {
	stringType = 'CharSequence'
	outputCharacterEncoding = 'UTF-8'
	fieldVisibility = "PRIVATE"
	createSetters = true
	enableDecimalLogicalType = true
}

dockerCompose {
    useComposeFiles = ['src/test/resources/compose/docker-compose.yml']
    startedServices = [] // Specify services to start if needed
    environment.put 'COMPOSE_PROJECT_NAME', 'integration-tests' // Optional: Name the project
    stopContainers = true // Ensure containers stop after the tests
    removeContainers = true // Cleanup after tests
    removeVolumes = true // Remove volumes after tests
    removeImages =  com.avast.gradle.dockercompose.RemoveImages.None
    waitForTcpPorts = true // Wait for services to be ready
    captureContainersOutput = true // Capture logs for debugging
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.kafka:kafka-clients:3.8.1'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.confluent:kafka-avro-serializer:7.8.0'
	implementation 'org.apache.avro:avro:1.12.0'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.18.2'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.temporal:temporal-spring-boot-starter:1.27.0'
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.52'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
	testImplementation 'io.gatling.highcharts:gatling-charts-highcharts:3.13.1'
	testImplementation 'io.gatling:gatling-test-framework:3.13.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.15.2'
	testImplementation 'org.mockito:mockito-core:5.15.2'
	testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-api:2.1.0-alpha1'
    testImplementation 'ch.qos.logback:logback-classic:1.5.16'
}

swaggerSources {
	payment {
		inputFile = file('src/main/resources/api/submit-payment.yaml')
		code {
			language = 'spring'
			outputDir = file('build/swagger')
			components = ['models']
			configFile = file('src/main/resources/api/config.json')
		}
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven/"
	}
}

jacocoTestReport {
	reports {
		xml.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}


tasks.named("check") {
	it.dependsOn(tasks.named("jacocoTestReport"))
}


idea {
	module {
		inheritOutputDirs = false
		outputDir = swaggerSources.payment.code.outputDir
	}
}



compileJava.dependsOn swaggerSources.payment.code
compileJava.dependsOn generateAvroJava



sourceSets.main.java.srcDir "${swaggerSources.payment.code.outputDir}/src/main/java"

tasks.named('test', Test) {
    useJUnitPlatform {
        excludeTags 'integration' // Exclude integration tests
    }
}

tasks.named('generateAvroJava').configure {
	source("src/main/avro")
	// Specify the order of compilation if needed
	include "Account.avsc"
	include "PaymentRecord.avsc"
}

tasks.named('jar') {
	enabled = false
}

tasks.register('cleanHprof', Delete) {
	delete fileTree(dir: '.', include: '**/*.hprof')
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    description = 'Run integration tests'
    useJUnitPlatform {
        includeTags 'integration'
    }
    shouldRunAfter 'test'
}

tasks.named('integrationTest') {
    dependsOn 'composeUp'
    finalizedBy 'composeDown'
}

check.dependsOn integrationTest



tasks.named('clean') {
	dependsOn cleanHprof
}

configurations.configureEach {
	resolutionStrategy.eachDependency { details ->
		if (details.requested.group == 'org.apache.tomcat.embed' && details.requested.name == 'tomcat-embed-core') {
			details.useVersion("10.1.34")
			details.because("CVE-2024-50379")
		}

		if (details.requested.group == 'ch.qos.logback') {
			details.useVersion '1.5.15'
			details.because("CVE-2024-12798")
		}

		if (details.requested.group == 'com.google.protobuf' && details.requested.name == 'protobuf-java') {
			details.useVersion '3.25.5'
			details.because("CVE-2024-7254")
		}

		if (details.requested.group == 'com.google.protobuf' && details.requested.name == 'protobuf-java-util') {
			details.useVersion '3.25.5'
			details.because("CVE-2024-7254 ")
		}


	}
}
